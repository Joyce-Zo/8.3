#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>
#include <string.h>

// 求第n个斐波那契数
// 方法1：递归     数量大时，前面重复次数太多，造成速度慢 
int Fib1(int m)
{
	if (m < 3)
		return 1;
	else
		return (Fib1(m - 1) + Fib1(m - 2));
}

//  方法2：循环     速度很快
int Fib2(int m)
{
	int a = 1;
	int b = 1;
	int c = 1;
	while (m > 2)
	{
		c = a + b;
		a = b;
		b = c;
		m--;
	}
	return c;
}

int main()
{
	int n = 0;
	scanf("%d", &n);
	 // 先用函数，再去编写函数-  TDD-测试驱动开发
	int ret = Fib2(n);
	printf("第%d个斐波那契数是%d",n,ret);

	return 0;
}
//int x = 1;
//int sum = 1;
//
//int Fac1(int n)
//{
//	if (x < n + 1)
//	{
//		//sum = sum * x;
//		sum *= x;
//		x++;
//		Fac1(n);
//	}
//	return sum;
//}
//int Fac2(int n)
//{
//	if (n <= 1)
//		return 1;
//	else
//		return n * Fac2(n - 1);
//}
//int Fac3(int n)
//{
//	int i = 0;
//	int ret = 1;
//	for (i = 1; i < n + 1; i++)
//	{
//		ret *= i;
//	}
//	return ret;
//}
//
//int main()
//{
//	int n = 0;
//	scanf("%d", &n);
//	int ret= Fac3(n);
//	printf("%d", ret);
//
//	return 0;
//}

//int my_strlen(char* arr)
//{
//	int count = 0;
//	while (*arr != '\0')
//	{
//		count++;
//		arr++;
//	}
//	return count;
//}

//int my_strlen(char* arr)
//{
//	if (*arr != '\0')		
//		return 1 + my_strlen(arr + 1);
//	else
//		return 0;
//}
//int main()
//{
//	char arr[] = "Hello Worldddd!";
//	//printf("%d ", strlen(arr));  计算字符串长度
//	int len = my_strlen(arr);
//	printf("%d ", len);
//
//	return 0;
//}

//   递归 的两个必要条件
//void print(int n)
//{
//	if (n > 9)
//	{       //  1.   存在限制条件，当满足这个限制条件时，递归便不再继续。
//		print(n / 10);
//	}   //    2.  每次调用递归后，越来越接近这个限制条件
//	printf("%d ", n % 10);
//}
//
//int main()
//{
//	unsigned int n = 0;
//	scanf("%d", &n);
//	print(n);
//	return 0;
//}

//int line = 0;
//int main()
//{
//	printf("ahalo %d\n", line);
//	line++;                    //会栈溢出
//	main();
//	return 0;
//}
